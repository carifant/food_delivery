#Первый статический анализатор это checkstyle

Checkstyle - инструмент разработки, помогающий программистам писать код Java, соответствующий стандарту кодирования.
Он автоматизирует процесс проверки кода Java, чтобы избавить людей от этой скучной (но важной) задачи.
Это делает его идеальным для проектов, которые хотят обеспечить соблюдение стандарта кодирования.
Checkstyle легко настраивается и может поддерживать практически любой стандарт кодирования.
Checkstyle может проверить многие аспекты вашего исходного кода. Он может найти проблемы дизайна класса,
проблемы дизайна метода.
У него также есть возможность проверить расположение кода и проблемы форматирования.
С данным анализотором я работал, насколько заметил, он проверяет код на соответствие конвенциям.
Думаю, что во многом его функционал по проверке перекрывает сама среда разработки.

# Второй это PMD

PMD - статический анализатор исходного кода с открытым исходным кодом, который сообщает о проблемах,
обнаруженных в коде приложения. PMD включает в себя встроенные наборы правил и поддерживает возможность
написания пользовательских правил.
PMD не сообщает об ошибках компиляции, поскольку может обрабатывать только правильно сформированные исходные файлы.
Проблемы, о которых сообщает PMD, - это довольно неэффективный код или плохие привычки программирования,
которые могут снизить производительность программы, если они накапливаются.
Он может анализировать файлы, написанные на Java, JavaScript, Apex и Visualforce, PLSQL, Apache Velocity, XML и XSL.

# Третий анализатор это

FindBugs - это инструмент статического анализа, который обнаруживает ошибки кодирования путем изучения файлов
классов Java. FindBugs включает в себя довольно сложную проверку ошибок нулевого указателя, но также ищет сотни
других шаблонов ошибок, многие из которых можно найти с помощью очень простых методов.
FindBug был загружен более 450 000 раз со всего мира и используется рядом крупных компаний с открытым исходным
кодом. FindBugs обычно способен находить сотни реальных дефектов / ошибок на миллион строк некомментирующих
исходных операторов.
Второй и третий анализатор скорее о том, как не допускать не синтаксических ошибок, а технических.
Которые пропускаются компилятором, но тем не менее являются если не ошибками,
то потенциально узкими и уязвимыми местами программы.
