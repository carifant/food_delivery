# Первая система сборки это Maven

Maven — инструмент для автоматизации сборки проектов. С ним работают в основном Java-разработчики,
хотя есть плагины для интеграции с C/C++, Ruby, Scala, PHP и другими языками.
Собрать на Java проект уровня «Hello, world!» можно и с помощью командной строки.
Но чем сложнее разрабатываемое ПО и чем больше оно использует сторонних библиотек и ресурсов,
тем сложнее будет команда для сборки. Maven разработан для облегчения этой работы.
Одна из главных особенностей фреймворка — декларативное описание проекта. Это значит,
что разработчику не нужно уделять внимание каждому аспекту сборки — все необходимые параметры
настроены по умолчанию. Изменения нужно вносить лишь в том объёме, в котором программист хочет
отклониться от стандартных настроек.
Ещё одно достоинство проекта — гибкое управление зависимостями. Maven умеет подгружать в свой локальный
репозиторий сторонние библиотеки, выбирать необходимую версию пакета, обрабатывать транзитивные зависимости.
Разработчики также подчёркивают независимость фреймворка от ОС. При работе из командной строки параметры
зависят от платформы, но Maven позволяет не обращать внимания на этот аспект.
При необходимости систему сборки можно настроить под собственные нужды, используя готовые плагины и архетипы.
А если ничего подходящего не нашлось — можно написать свои.
Ранее работал в Mavene, вроде ничего архисложного там не было, свои функции система сборки выполняла.

# Вторая система сборки это Gradle

Gradle — система автоматической сборки, построенная на принципах Apache Ant и Apache Maven, но предоставляющая
DSL на языках Groovy и Kotlin вместо традиционной XML-образной формы представления конфигурации проекта.
В отличие от Apache Maven, основанного на концепции жизненного цикла проекта, и Apache Ant, в котором порядок
выполнения задач (targets) определяется отношениями зависимости (depends-on), Gradle использует направленный
ациклический граф для определения порядка выполнения задач.
Gradle был разработан для расширяемых многопроектных сборок, и поддерживает инкрементальные сборки, определяя,
какие компоненты дерева сборки не изменились и какие задачи, зависимые от этих частей, не требуют перезапуска.
Основные плагины предназначены для разработки и развертывания Java, Groovy и Scala приложений, но готовятся
плагины и для других языков программирования.
Gradle и Maven имеют разницу во взгляде на то, как собирать проект. Gradle основан на графе задач (task),
которые могут зависеть друг от друга. Задачи выполняют какую-то работу. Maven же использует модель определённых
фаз (phase), к которым присоединяются определённые "цели" (goals). В этих goals и выполняется какая-то работа.
Однако, при таких разных подходах обе системы сборки следуют одному соглашению и управление зависимостями
происходит схоже.
